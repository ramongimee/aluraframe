{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAuB;AAAA;;AAEnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAEhB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;;AAEjC,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACiB,WADjB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,aAAI;;AAEpBN;AACH,6BAHD;;AAKAE,oCAAQK,OAAR,GAAkB,aAAI;;AAElBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAJD;AAKH,yBAjBM,CAAP;AAkBH;;;iDAGW;AAAA;;AAER,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;;AAEnC,gCAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACkB,WADlB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAI;;AAEpB,oCAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,oCAAGD,KAAH,EAAS;;AAEL,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA0BH,KAAKI,WAA/B,EAA2CJ,KAAKK,MAAhD,CAAjB;;AAEAP,0CAAMQ,QAAN;AACH,iCAPD,MAQI;AACAxB,4CAAQe,WAAR;AAEH;AAEH,6BAjBD;;AAmBAF,mCAAON,OAAP,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,wCAAP;AACH,6BAHD;AAIH,yBAhCM,CAAP;AAiCH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAmB;;AAElC,gCAAIC,UAAU,OAAKN,WAAL,CACbO,WADa,CACD,CAAC,OAAKN,MAAN,CADC,EACa,WADb,EAEbO,WAFa,CAED,OAAKP,MAFJ,EAGb4B,KAHa,EAAd;;AAKAvB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,kCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,wCAAP;AACH,6BAJD;AAMH,yBAfM,CAAP;AAgBH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoDao {\n\n    constructor(connection){\n\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao){\n\n        return new Promise((resolve,reject)=>{\n        \n            let request = this._connection\n                .transaction([this._store],'readwrite')\n                .objectStore(this._store)\n                .add(negociacao);   \n\n            request.onsuccess = e =>{\n\n                resolve();\n            }\n\n            request.onerror = e =>{\n\n                console.log(e.target.error);\n                reject('Não foi possível adicionar a negociação')\n            }\n        });\n    }\n\n\n    listaTodos(){\n\n        return new Promise((resolve, reject) =>{\n\n            let cursor = this._connection\n                .transaction([this._store],'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n\n            let negociacoes = [];\n\n            cursor.onsuccess = e =>{\n\n               let atual = e.target.result;\n\n               if(atual){\n\n                   let dado = atual.value;\n\n                   negociacoes.push(new Negociacao(dado._data,dado._quantidade,dado._valor));\n\n                   atual.continue();\n               }\n               else{\n                   resolve(negociacoes);\n                   \n               }\n\n            }\n\n            cursor.onerror =  e => {\n                console.log(e.target.error);\n                reject('Não foi possível listar as negociações');\n            };\n        });\n    }\n\n    apagaTodos(){\n        return new Promise((resolve,reject) =>{\n\n            let request = this._connection\n            .transaction([this._store],'readwrite')\n            .objectStore(this._store)\n            .clear();\n\n            request.onsuccess = e => resolve('Negociações apagadas com sucesso');\n\n            request.onerror = e => {\n\n                console.log(e.target.error);\n                reject('Não foi possível apagar as negociações');\n            }\n\n        });\n    }\n}"]}