{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","error","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","erro","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {Negociacao} from '../models/Negociacao';\nexport class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível obter as negociações da semana anterior');\n            });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\n            });\n    }\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n\n    }\n\n    cadastra(negociacao) {\n\n       return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao = dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação')\n            });\n    }\n\n    lista(){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao = dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações');\n            }) \n    }\n\n    apaga(){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao = dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch((erro) => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações');\n            });\n    }\n\n    importa(listaAtual){\n\n        return this.obterNegociacoes()\n        .then(negociacoes =>\n            negociacoes.filter(negociacao =>\n                !listaAtual.some(negociacaoExistente => \n                    JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))\n            )\n        )\n        .catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possível buscar negociações para importar');\n        });\n    }\n}"]}