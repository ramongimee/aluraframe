{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","error","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","erro","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível obter as negociações da semana anterior');\n            });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(error => {\n                console.log(error);\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\n            });\n    }\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), []);\n\n            return negociacoes;\n\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n\n    }\n\n    cadastra(negociacao) {\n\n       return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao = dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação')\n            });\n    }\n\n    lista(){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao = dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações');\n            }) \n    }\n\n    apaga(){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao = dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch((erro) => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações');\n            });\n    }\n\n    importa(listaAtual){\n\n        return this.obterNegociacoes()\n        .then(negociacoes =>\n            negociacoes.filter(negociacao =>\n                !listaAtual.some(negociacaoExistente => \n                    JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))\n            )\n        )\n        .catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possível buscar negociações para importar');\n        });\n    }\n}"]}