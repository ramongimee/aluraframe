{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAEHC,iB;AAGT,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,6BAJD;;AAMAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN,CAD2B,CACmC;AACjE,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AAEH,6BAXD;;AAaAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASX,KAArB;;AAEAG,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,6BAND;AAQH,yBA/BM,CAAP;AAgCH;;;kDACoBtB,U,EAAY;AAC7BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWe,MAAX,CAAkBS,gBAAlB,CAAmCC,QAAnC,CAA4CC,KAA5C,CAAJ,EAAwD1B,WAAWe,MAAX,CAAkBY,iBAAlB,CAAoCD,KAApC;;AAExD1B,uCAAWe,MAAX,CAAkBa,iBAAlB,CAAoCF,KAApC,EAA2C,EAAEG,eAAe,IAAjB,EAA3C;AACH,yBAJD;AAKH;;;sDACwB;AACrB,4BAAI7B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\n    const version = 4;\n    const dbName = 'aluraframe';\n    let connection = null;\n    let close = null;\n\nexport class ConnectionFactory {\n\n\n    constructor() {\n        throw new Error('Não é possivel criar uma instâncias de ConnectionFactory')\n    }\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n\n                ConnectionFactory._createStores(e.target.result);\n\n            };\n\n            openRequest.onsuccess = e => {\n\n                if (!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function () {\n                        throw new Error('Você não pode fechar diretamente a conexão');//Monkey Patch\n                    }\n                }\n                resolve(connection);\n\n            };\n\n            openRequest.onerror = e => {\n\n                console.log(e.target.Error);\n\n                reject(e.target.error.name);\n\n            };\n\n        });\n    }\n    static _createStores(connection) {\n        stores.forEach(store => {\n            if (connection.result.objectStoreNames.contains(store)) connection.result.deleteObjectStore(store);\n            \n            connection.result.createObjectStore(store, { autoIncrement: true });\n        });\n    }\n    static closeConnection() {\n        if (connection) {\n            close();\n            connection = null;\n        }\n    }\n}"]}